{-
TorXakis - Model Based Testing
Copyright (c) 2015-2021 ESI (TNO) and Radboud University
See LICENSE at root directory of this repository.
-}

-- ----------------------------------------------------------------------------------------- --
-- Model of a Matrix application for login, room creation and message sending,
-- with inputs 'In !ValidLogin', 'In !InvalidLogin(s)', and with output 'Out !resp'. 

-- ----------------------------------------------------------------------------------------- --
-- General Data Definitions

-- ----------------------------------------------------------------------------------------- --
--   Codes :  an enumeration of HTTP statuses
--     constructors:
--       OK       	:  HTTP 200 status code
--       Forbidden 	:  HTTP 403 status code 
--     generated standard functions:
--       isOK(s)  		:  check if status s matches OK
--       isForbidden(s) :  check if status s matches Forbidden

TYPEDEF Statuses  ::= 	OK
						| Forbidden
ENDDEF

TYPEDEF Response  ::=   
		Response 	{ code :: Statuses
					; data :: String
					}
ENDDEF

TYPEDEF  LoginOp   ::= 	    LoginCreds { username, password :: String }
ENDDEF
-- ----------------------------------------------------------------------------------------- --
-- LoginOp :  operations on a queue
--     constructors:
--       LoginCreds    :  request to login using valid OR invalid credentials
--     generated standard functions:
--       isLoginCreds(lop) 

----------------------------------------------------------------------------------------
-- Input Validity functions

FUNCDEF isValid_InvalidLogin (op :: LoginOp) :: Bool ::=
       isLoginCreds ( op ) /\ (username( op ) == "wrong") /\ (password ( op ) == "wrong")  
       --there was sth wrong with the regex until we figure it out we can use this dummy invalid user pass
ENDDEF

FUNCDEF isValid_ValidLogin (op :: LoginOp) :: Bool ::=
       isLoginCreds ( op ) /\ (username( op ) == "matrixadmin") /\ (password( op ) == "admin")
ENDDEF

-------------------------------------------------------------------------------------------
-- Successful (Valid) and unsuccessful (Invalid) login processes -> generates response 
PROCDEF matrixValidLogin [ In :: LoginOp; Out :: Response ] ( resp :: Response ) ::=
		Out ! resp
		>-> matrixLogin [In, Out] ( )
ENDDEF

PROCDEF matrixInvalidLogin [ In :: LoginOp; Out :: Response ] ( resp :: Response ) ::=
		Out ! resp
		>-> matrixLogin [In, Out] ()
ENDDEF

-------------------------------------------------------------------------------------------
-- Main process, makes a choice between valid login and invalid login


PROCDEF matrixLogin [ Operation :: LoginOp; Out :: Response ] () ::=

       (Operation ? op [[isValid_InvalidLogin(op)]] >->  matrixInvalidLogin [ Operation, Out ] (Response(Forbidden, ""))
       ##
       Operation ? op [[isValid_ValidLogin(op)]] >->  matrixValidLogin [ Operation, Out ] (Response(OK, "")))
ENDDEF


-------------------------------------------------------------------------------------------
-- Channel, Model and Adapter Definitions
CHANDEF  Channels  ::=    In   	:: LoginOp
                        ; Out  	:: Response
ENDDEF

MODELDEF  MatrixModel
   ::=
        CHAN IN    In
        CHAN OUT   Out

        BEHAVIOUR  matrixLogin [ In, Out ] ()

			     
ENDDEF

--------------------------------------------------
CONSTDEF separator :: String ::= "@" ENDDEF
--------------------------------------------------

CNECTDEF  Sut
   ::=
        CLIENTSOCK

        CHAN  OUT  In                         HOST "localhost"  PORT 8567
        ENCODE     In ? lop               ->  ! toString(username(lop)) ++ separator ++
        toString( password(lop)) 



        CHAN  IN   Out                       HOST "localhost"  PORT 8567
        DECODE     Out ! fromString(r)   <-   ? r
ENDDEF
{-
TorXakis - Model Based Testing
Copyright (c) 2015-2021 ESI (TNO) and Radboud University
See LICENSE at root directory of this repository.
-}

-- ----------------------------------------------------------------------------------------- --
-- Model of a Matrix application for login, room creation and message sending,
-- with inputs 'In !ValidLogin', 'In !InvalidLogin(s)', and with output 'Out !resp'. 

-- ----------------------------------------------------------------------------------------- --
-- General Data Definitions

-- ----------------------------------------------------------------------------------------- --
--   Codes :  an enumeration of HTTP statuses
--     constructors:
--       OK       	:  HTTP 200 status code
--       Forbidden 	:  HTTP 403 status code 
--     generated standard functions:
--       isOK(s)  		:  check if status s matches OK
--       isForbidden(s) :  check if status s matches Forbidden

TYPEDEF Statuses  ::= 	OK
						| Forbidden
ENDDEF

TYPEDEF Response  ::=   
		Response 	{ code :: Statuses
					; data :: String
					}
ENDDEF

-- ----------------------------------------------------------------------------------------- --
-- QueueOp :  operations on a queue
--     constructors:
--       ValidLogin     :  request to login using valid credentials
--       InvalidLogin   :  request to login using invalid credentials
--     generated standard functions:
--       isValidLogin(lop) :  
--       isInvalidUsernameLogin(lop) :  
--       isInvalidPasswordLogin(lop) :  
TYPEDEF  LoginOp   ::=   ValidLogin 
                       | InvalidUsernameLogin { username :: String }
                       | InvalidPasswordLogin { password :: String }
ENDDEF

FUNCDEF isValidString (credentials :: LoginOp; isusername :: Bool) :: Bool
   ::=
		IF isusername THEN (strinre (username(credentials), REGEX ('[A-Z][a-z]*'))) ELSE (strinre (password(credentials), REGEX ('[A-Z][a-z]*'))) FI
ENDDEF

FUNCDEF isValidCredentials (credentials :: LoginOp; isusername :: Bool) :: Bool
   ::=
        IF isusername THEN(username(credentials) == "matrixadmin") ELSE (password(credentials) == "admin") FI
ENDDEF

PROCDEF matrixInvalidLogin [ In :: LoginOp; Out :: Response ] ( op :: LoginOp; isUsername :: Bool; resp :: Response ) ::=
		[[ (isInvalidUsernameLogin ( op ) \/ isInvalidPasswordLogin ( op )) /\ not(isValidCredentials(op, isUsername)) {- /\ isValidString(op, isUsername)-}]]
		=>> Out ! resp
		>-> matrixProcInvalidLogin [In, Out] ( resp )
ENDDEF

PROCDEF matrixValidLogin [ In :: LoginOp; Out :: Response ] ( op :: LoginOp; resp :: Response ) ::=
		[[ isValidLogin(op) ]]
		=>> Out ! resp
		>-> matrixProcInvalidLogin [In, Out] ( resp )
ENDDEF

PROCDEF matrixProcInvalidLogin [ Operation :: LoginOp; Out :: Response ] ( resp :: Response ) ::=
		Operation ? op [[ isInvalidUsernameLogin ( op ) ]] >-> matrixInvalidLogin [ Operation, Out ] (op, True, resp)
    ##
        Operation ? op [[ isInvalidPasswordLogin ( op ) ]] >-> matrixInvalidLogin [ Operation, Out ] (op, False, resp)
    ## 
        Operation ? op [[ isValidLogin ( op ) ]] >-> matrixValidLogin [ Operation, Out ] (op, resp)
ENDDEF

CHANDEF  Channels  ::=    In   	:: LoginOp
                        ; Out  	:: Response
ENDDEF

MODELDEF  MatrixModel
   ::=
        CHAN IN    In
        CHAN OUT   Out

        BEHAVIOUR  
			matrixProcInvalidLogin [ In, Out ] ( Response(Forbidden, "") )
ENDDEF


CNECTDEF  Sut
   ::=
        CLIENTSOCK

        CHAN  OUT  In                         HOST "localhost"  PORT 8567
        ENCODE     In ? lop               ->  ! toString(lop)

        CHAN  IN   Out                       HOST "localhost"  PORT 8567
        DECODE     Out ! fromString(r)   <-   ? r
ENDDEF
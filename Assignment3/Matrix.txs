{-
TorXakis - Model Based Testing
Copyright (c) 2015-2021 ESI (TNO) and Radboud University
See LICENSE at root directory of this repository.
-}

-- ----------------------------------------------------------------------------------------- --
-- Model of a Matrix application for login, room creation and message sending,
-- with inputs 'In !ValidLogin', 'In !InvalidLogin(s)', and with output 'Out !resp'. 

-- ----------------------------------------------------------------------------------------- --
-- General Data Definitions

-- ----------------------------------------------------------------------------------------- --
--   Codes :  an enumeration of HTTP statuses
--     constructors:
--       OK       	:  HTTP 200 status code
--       Forbidden 	:  HTTP 403 status code 
--     generated standard functions:
--       isOK(s)  		:  check if status s matches OK
--       isForbidden(s) :  check if status s matches Forbidden

TYPEDEF Statuses  ::= 	OK
						| Forbidden
ENDDEF

TYPEDEF Response  ::=   
		Response 	{ code :: Statuses
					; data :: String
					}
ENDDEF

-- ----------------------------------------------------------------------------------------- --
-- QueueOp :  operations on a queue
--     constructors:
--       ValidLogin     :  request to login using valid credentials
--       InvalidLogin   :  request to login using invalid credentials
--     generated standard functions:
--       isValidLogin(lop) :  
--       isInvalidUsernameLogin(lop) :  
--       isInvalidPasswordLogin(lop) :  
TYPEDEF  LoginOp   ::= InvalidUsernameLogin { invalidUsername :: String }
                       | InvalidPasswordLogin { invalidPassword :: String }
					   | ValidLogin { username, password :: String }
ENDDEF

PROCDEF matrixValidLogin [ In :: LoginOp; Out :: Response ] ( resp :: Response ) ::=
		Out ! resp
		>-> matrixProcInvalidLogin [In, Out] ( resp )
ENDDEF

PROCDEF matrixInvalidLogin [ In :: LoginOp; Out :: Response ] ( resp :: Response ) ::=
		Out ! resp
		>-> matrixProcInvalidLogin [In, Out] ( resp )
ENDDEF

FUNCDEF isValid_InvalidUserNameLogin (op :: LoginOp) :: Bool ::=
       (isInvalidUsernameLogin ( op ) /\ (strinre (invalidUsername(op), REGEX ('[A-Z][a-z][0-9]*'))))
ENDDEF

FUNCDEF isValid_InvalidPasswordLogin (op :: LoginOp) :: Bool ::=
       (isInvalidPasswordLogin ( op ) /\ (strinre (invalidPassword(op), REGEX ('[A-Z][a-z][0-9]*'))))
ENDDEF

FUNCDEF isValid_ValidLogin (op :: LoginOp) :: Bool ::=
       isValidLogin ( op ) /\ (username( op ) == "matrixadmin") /\ (password( op ) == "admin")
ENDDEF

PROCDEF matrixProcInvalidLogin [ Operation :: LoginOp; Out :: Response ] ( resp :: Response ) ::=
{-
		Operation ? op [[ isValid_InvalidUserNameLogin ( op ) ]] >-> matrixInvalidLogin [ Operation, Out ] (resp)
    ## 
		Operation ? op [[ isValid_InvalidPasswordLogin ( op ) ]] >-> matrixInvalidLogin [ Operation, Out ] (resp)
    ## 
-}
        Operation ? op [[ isValid_ValidLogin ( op ) ]] >-> matrixValidLogin [ Operation, Out ] (resp)
ENDDEF

CHANDEF  Channels  ::=    In   	:: LoginOp
                        ; Out  	:: Response
ENDDEF

MODELDEF  MatrixModel
   ::=
        CHAN IN    In
        CHAN OUT   Out

        BEHAVIOUR  
			matrixProcInvalidLogin [ In, Out ] ( Response(Forbidden, "") )
ENDDEF


CNECTDEF  Sut
   ::=
        CLIENTSOCK

        CHAN  OUT  In                         HOST "localhost"  PORT 8567
        ENCODE     In ? lop               ->  ! toString(lop)

        CHAN  IN   Out                       HOST "localhost"  PORT 8567
        DECODE     Out ! fromString(r)   <-   ? r
ENDDEF
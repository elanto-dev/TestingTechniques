{-
TorXakis - Model Based Testing
Copyright (c) 2015-2021 ESI (TNO) and Radboud University
See LICENSE at root directory of this repository.
-}

-- ----------------------------------------------------------------------------------------- --
-- Model of a Matrix application for login, room creation and message sending,
-- with inputs 'In !ValidLogin', 'In !InvalidLogin(s)', and with output 'Out !resp'. 

-- ----------------------------------------------------------------------------------------- --
-- General Data Definitions

-- ----------------------------------------------------------------------------------------- --
--   Codes :  an enumeration of HTTP statuses
--     constructors:
--       OK       	:  HTTP 200 status code
--       Forbidden 	:  HTTP 403 status code 
--       Unauthorized :   HTTP 401 status code
--     generated standard functions:
--       isOK(s)  		:  check if status s matches OK
--       isForbidden(s) :  check if status s matches Forbidden
--       isUnauthorized : check if status matches Unauthorized

TYPEDEF Statuses  ::= 	OK
						| Forbidden
                                          | Unauthorized
ENDDEF

TYPEDEF Response  ::=   
		Response 	{ code :: Statuses} 
ENDDEF
-- ----------------------------------------------------------------------------------------- --
-- LoginOp :  operations in a login
--     constructors:
--       LoginCreds    :  request to login using valid OR invalid credentials
--     generated standard functions:
--       isLoginCreds(lop) 

TYPEDEF  LoginOp   ::= 	    LoginCreds { username, password :: String }
ENDDEF
----------------------------------------------------------------------------------------
-- Login Input Validity Functions

FUNCDEF isValid_InvalidLogin (op :: LoginOp) :: Bool ::=
       isLoginCreds ( op ) /\ (username( op ) == "wrong") /\ (password ( op ) == "wrong")  
       --there was sth wrong with the regex until we figure it out we can use this dummy invalid user pass
ENDDEF

FUNCDEF isValid_ValidLogin (op :: LoginOp) :: Bool ::=
       isLoginCreds ( op ) /\ (username( op ) == "matrixadmin") /\ (password( op ) == "admin")
ENDDEF
-- ----------------------------------------------------------------------------------------- --
-- CreateRoomOp :  operations in a room creation
--     constructors:
--       RoomDetails    :  request to login using valid OR invalid credentials
--     generated standard functions:
--       isRoomDetails(lop) 

TYPEDEF CreateRoomOp ::=        RoomDetails {roomname,roomtopic,roompreset, accesstoken :: String;
                                             roomversion :: Int}
ENDDEF


-------------------------------------------------------------------------------------------
-- Successful (Valid) and unsuccessful (Invalid) login processes -> generates response 
PROCDEF matrixValidLogin [ LoginIn :: LoginOp; LoginOut :: Response ] ( resp :: Response ) ::=
       LoginOut ! resp
		>-> matrixLogin [LoginIn, LoginOut] ( )
ENDDEF

PROCDEF matrixInvalidLogin [ LoginIn :: LoginOp; LoginOut :: Response ] ( resp :: Response ) ::=
       LoginOut ! resp
		>-> matrixLogin [LoginIn, LoginOut] ()
ENDDEF

-------------------------------------------------------------------------------------------
-- Main Login Process, makes a choice between valid login and invalid login


PROCDEF matrixLogin [ Operation :: LoginOp; LoginOut :: Response ] () ::=

       (Operation ? op [[isValid_InvalidLogin(op)]] >->  matrixInvalidLogin [ Operation, LoginOut ] (Response(Forbidden))
       ##
       Operation ? op [[isValid_ValidLogin(op)]] >->  matrixValidLogin [ Operation, LoginOut ] (Response(OK)))
ENDDEF

----------------------------------------------------------------------------------------------
-- CreateRoomOp Input Validity Function --> making sure torxakis makes the right request with valid fields

FUNCDEF isValidRoomDetails ( cop :: CreateRoomOp) :: Bool ::=
       isRoomDetails ( cop ) /\ (roomname ( cop ) == "anyname") /\ (roomtopic (cop) == "anytopic") /\ (roompreset (cop) == "public_chat")
       /\ (roomversion (cop) == 1) /\ (accesstoken(cop) == "correcttoken")
       {-things should change to a proper regex -}
ENDDEF

FUNCDEF isInvalidRoomDetails ( cop :: CreateRoomOp) :: Bool ::=
       isRoomDetails ( cop ) /\ (roomname ( cop ) == "anyname") /\ (roomtopic (cop) == "anytopic") /\ (roompreset(cop)== "public_chat")
       /\ (roomversion(cop) == 1) /\ (accesstoken(cop) == "wrongtoken"){-things should change to a proper regex -}
ENDDEF

---------------------------------------------------------------------------------------------
--create a room scenario
 --auth code needed

PROCDEF matrixValidCreateRoom [ CreateRoomIn :: CreateRoomOp; CreateRoomOut :: Response ] ( resp :: Response ) ::=
       CreateRoomOut ! resp
       >-> matrixCreateRoom [CreateRoomIn, CreateRoomOut] ( )
ENDDEF

PROCDEF matrrixInvalidCreateRoom [ CreateRoomIn :: CreateRoomOp; CreateRoomOut :: Response ] ( resp :: Response ) ::=
       CreateRoomOut ! resp
       >-> matrixCreateRoom [CreateRoomIn, CreateRoomOut] ()
ENDDEF

PROCDEF matrixCreateRoom [Operation:: CreateRoomOp ; CreateRoomOut :: Response]() ::=

       Operation ? op [[isValidRoomDetails(op)]] >->  matrixValidCreateRoom [ Operation, CreateRoomOut ] (Response(OK)) 
       -- ##
       -- Operation ? op [[isInvalidRoomDetails(op)]] >-> matrrixInvalidCreateRoom [ Operation, CreateRoomOut] (Response(Unauthorized))
       -- ##
       -- Operation ? op [[isInvalidRoomDetails(op) {-maybe dif cond-}]] >-> matrrixInvalidCreateRoom [ Operation, Out] (Response(Forbidden))
ENDDEF



----------------------------------------------------------------------------------------------
--- Input validity for deleting a room 



-- send message scenario




-- PROCDEF matrixSendMessage [Operation:: LoginOp; Out :: Response]():

-- ENDDEF




-------------------------------------------------------------------------------------------
-- Channel, Model and Adapter Definitions
CHANDEF  Channels  ::=    CreateRoomIn   	:: CreateRoomOp
                        ; CreateRoomOut  	:: Response
                        ; LoginIn :: LoginOp
                        ; LoginOut  	:: Response

ENDDEF

MODELDEF  MatrixModel
   ::=
        CHAN IN    CreateRoomIn,LoginIn
        CHAN OUT   LoginOut,CreateRoomOut

        BEHAVIOUR  (
                     matrixLogin [ LoginIn, LoginOut ] ()
                     ##
                      matrixCreateRoom [ CreateRoomIn , CreateRoomOut] () 
                     )


			     
ENDDEF

--------------------------------------------------
CONSTDEF separator :: String ::= "@" ENDDEF
--------------------------------------------------

CNECTDEF  Sut::=
        CLIENTSOCK

        CHAN  OUT  LoginIn                         HOST "localhost"  PORT 8568
        ENCODE     LoginIn ? lop               ->  ! toString(username(lop)) ++ separator ++
                                                toString(password(lop)) 

       CHAN  OUT  CreateRoomIn                         HOST "localhost"  PORT 8567
       ENCODE CreateRoomIn ? op                     ->    !  toString(roomname(op)) ++ separator ++
                                                             toString(roomtopic(op)) ++ separator ++
                                                             toString(roompreset(op)) ++ separator ++
                                                             toString(roomversion(op)) ++ separator ++
                                                             toString(accesstoken(op)) 



                                                             

        
        CHAN  IN   LoginOut                       HOST "localhost"  PORT 8568
        DECODE     LoginOut ! fromString(r)   <-   ? r

        CHAN  IN   CreateRoomOut                       HOST "localhost"  PORT 8567
        DECODE     CreateRoomOut ! fromString(r)   <-   ? r
ENDDEF